sudo: false
language: cpp
python:
  - "3.6"
cache:
  - ccache
matrix:
  include:
    # Tests build
    - os: linux
      dist: xenial
      sudo: require
      addons:
        apt:
          sources:
            - sourceline: 'ppa:cs50/ppa'
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'ppa:beineri/opt-qt-5.11.1-xenial'
          packages:
            - astyle
            - doxygen
            - g++-7
            - git
            - build-essential
            - qt511base
            - qt511charts-no-lgpl qt511graphicaleffects qt511quickcontrols qt511quickcontrols2 qt511scxml qt511serialport qt511svg
            - libgl1-mesa-dev
            - xvfb
      env:
        - DESC="Check code style && Doxygen"
        - PINGTEST="true"
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    # AppImage deploy
    - os: linux
      dist: xenial
      sudo: require
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
            - sourceline: 'ppa:beineri/opt-qt-5.11.1-xenial'
          packages:
            - g++-7
            - git
            - build-essential
            - qt511base
            - qt511charts-no-lgpl qt511graphicaleffects qt511quickcontrols qt511quickcontrols2 qt511scxml qt511serialport qt511svg
            - libgl1-mesa-dev
      env:
        - DESC="AppImage deploy"
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    # .dmg file deploy for Mac OS (release)
    - os: osx
      osx_image: xcode9.3
      compiler: clang
      env:
        - DESC="dmg deploy"
        - MATRIX_EVAL="COMPILER=clang++"
        - QT_CONFIG="release"

    # .dmg file deploy for Mac OS (debug)
    - os: osx
      osx_image: xcode9.3
      compiler: clang
      env:
        - DESC="dmg debug"
        - MATRIX_EVAL="COMPILER=clang++"
        - QT_CONFIG="debug"

before_install:
# This is necessary to solve https://github.com/travis-ci/travis-ci/issues/9649
- eval "${MATRIX_EVAL}"
# Install ccache for non test builds
- if [[ "${TRAVIS_OS_NAME}" == "linux" && "$PINGTEST" != "true" ]]; then
    sudo apt install ccache;
  fi
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    brew update > /dev/null;
    brew install ccache;
  fi

install:
# Install necessary tools to compile the code
# Install jinja2 for protocol generation
- pip install --user --upgrade pip;
- pip install --user jinja2;

# Install Qt in Mac OS
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    brew install qt;
    chmod -R 755 /usr/local/opt/qt5/*;
    export QTDIR="/usr/local/opt/qt5";
    export PATH="$QTDIR/bin:$PATH";
  fi

script:
# Use Gcc-7
# Load Qt env variables
- echo $PINGTEST
- if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60;
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 60;
    source /opt/qt*/bin/qt*-env.sh;
  fi

# Run tests
# Check code style
# Check doxygen comments
# Run unittests with fake xserver
- echo $PINGTEST
- if [ "$PINGTEST" == "true" ]; then
    ./tools/runtests.sh || travis_terminate 1;
  fi

# Create AppImage for Linux
# Compile ping-viewer
# Move necessary files in deploy folder
# Create AppImage with linuxdeployqt
- if [[ "${TRAVIS_OS_NAME}" == "linux" && "$PINGTEST" != "true" ]]; then
    ./tools/compile.sh || travis_terminate 1;
  fi
# Create .dmg for Mac OS with macdeployqt
# The steps are the same one in Linux
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    ./tools/compile.sh || travis_terminate 1;
  fi

after_success:
# Upload files in GitHub
- export DEPLOY_FILE="";
- if [ "$PINGTEST" != "true" ]; then
    ls /tmp/pingviewer*;
    wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh;
  fi
- if [ ! -z $TRAVIS_BRANCH ] && [ "$TRAVIS_BRANCH" != "master" ] ; then
    export UPLOADTOOL_SUFFIX=$TRAVIS_BRANCH;
  fi
- if [[ "${TRAVIS_OS_NAME}" == "linux" && "$PINGTEST" != "true" ]]; then
    export DEPLOY_FILE=/tmp/pingviewer*.AppImage;
  fi
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    export DEPLOY_FILE=/tmp/pingviewer*.dmg;
  fi
- if [ "$PINGTEST" != "true" ]; then
    bash ./upload.sh ${DEPLOY_FILE};
  fi
# Move files to s3 folder and send to amazon
- echo "Deploy: ${DEPLOY_FILE}";
- mkdir -p /tmp/deploy/s3;
- mv ${DEPLOY_FILE} /tmp/deploy/s3;
- echo "S3 folder";
- ls /tmp/deploy/s3/*;

deploy:
  # deploy installers to s3 builds/ if on a branch
  - provider: s3
    access_key_id: AKIAI42TETMLX6KJRTRA
    secret_access_key:
      secure: sWhs8EH+S49EOmQGVFmnN2aaFegrdahNO7hjUSVLR3jwwjJYEEvzJEXd2wQg1LzkP6l7IBt8B+q8rHNiX9lwXUW11X0BVsrAz6vo1V99usnknvTIW+em6lWGGQcd1LZnrUWPwHhK/+7tmD/7crNuxxKsdiYqDLyP8AdvNwhK+/WzQj6zoBOhE++F5fKi52UK9glM15Zk30t8Ng0qmub1+zaPJwO1FPIR+hcAesxGDDplVSDQIiOZ4SqgYmC7u26HpcfsOXLS8YQdQwHOk6K+fNgrOc3MbdP0kE2W21SeVGNOVZaLsy6fAnZEdaJQcX1bkCFVgilcsyf5zppNuh0HFoNF4OpG9oDYQFYBkR0iDYnqXw89raqovW5N6hbsV4K6PN9/vLgk6KTuP5jpoIwvmGSYiPPXvgE26/agNMkEeJnwv/aa1QAABKX3A6XYylN9brmBUFE3xL5DyY2L0nH1q1KdtH+iOUpPRYnMkDNenPwbqlx2QC66pz06+IzYG4n1nRfTq4D23CsPud2W7dhsPg1ZWVxKkDS5rTHlIgpbWoj22jAJmwS48XVD98R0CoNsbsFCAPd6BMiciGirsyIRTtfJai25YbkJ+YDwrhzu/r8V9hpnjGc2PiwetXTnaPz8OOWmPgTGclNZD8FhdJwWPhnBMR56CT3ZxL5Sg3f4Ba4=
    bucket: downloads.bluerobotics.com
    upload-dir: PingViewer/builds/${TRAVIS_BRANCH}
    acl: public_read
    region: us-east-1
    file_glob: true
    local_dir: /tmp/deploy/s3/
    file:
      - /tmp/deploy/s3/*
    skip_cleanup: true
    on:
      all_branches: true
      condition: ${DEPLOY_FILE} != ""
